.w{
    width: 100%;
    max-width: 2560px;
    overflow: hidden;
}
.header{
    width: 50%;
    height: 80px;
    line-height: 50px;
    margin: 20px auto;
    text-align: center;
    font-size: 35px;
    color:black;
}
.renwu{
    width: 100%;
    height: 330px;
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
}
.renwu img{
    width: 15%;
    height: 100%;
    object-fit: cover;
}
.renwu .zis{
    width: 84%;
    height: 100%;
    background-color: gold;
}
.renwu .zis .zi{
    width: 230px;
    height: 50px;
    text-align: center;
    font-size: 25px;
    color: #fff;
    line-height: 50px;
    background-color: pink;
    margin-bottom: 20px;
}
.caidan{
    width: 100%;
    height: 80px;
    background-color: red;
}
.dui{
    background-color: palevioletred;
}
.caidan li{
    float: left;
    width:  320px;
    height: 80px;
    color: #000;
} 
.caidan a{
    width: 50px;
    height: 60px;
    color: aliceblue;
}
.background1{
    background-image: url(../imag/cfd6283641a0f7b6408ac74f040aceaa.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}
.background2{
    background-image: url(../imag/cfd6283641a0f7b6408ac74f040aceaa.jpg);

}
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    /* background-color: #f4f4f4; */
    /* background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('../image/graph.jpg'); */
    background-size: cover;
}
header {
    /*background-color: #0c008d;*/
    background: transparent;
    color: #fff;
    padding: 10px 0;
}


/* 下拉菜单样式 */
.dropdown {
    display: none; /* 默认隐藏下拉菜单 */
    position: absolute; /* 绝对定位 */
    background-color: #333;
    min-width: 160px; /* 下拉菜单的宽度 */
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); /* 阴影效果 */
    z-index: 1; /* 确保下拉菜单在其他内容之上 */
}

/* 下拉菜单中的链接样式 */
.dropdown li {
    float: none; /* 清除浮动 */
}
.dropdown li a {
    color: white;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    text-align: left;
}

/* 鼠标悬停在下拉菜单链接上时的样式 */
.dropdown li a:hover {
    background-color: #555;
}

/* 当鼠标悬停在导航项上时显示下拉菜单 */
.container li:hover .dropdown {
    display: block}

/* 背景图片设置 */
.background-slider {
    z-index: -1; /* 确保背景在内容之下 */
}

.lighttext {
    font-family:'Courier New', Courier, monospace ;
    font-style: initial;
    /*
    position: absolutely;
    top: 20%;
    left: 50%;
    transform: translate(-50%, -50%);*/
    margin: 0;
    padding: 0 20px;
    font-size: 20px;
    color: #0e0005;
    color: #fff;
    /* 先在文字周围生成集中度较高的阴影效果*/
    text-shadow: 0 0 20px #5100ff;
}
p.lighttext {
    font-family:'Courier New', Courier, monospace ;
    font-style: initial;
    /*
    position: absolutely;
    top: 20%;
    left: 50%;
    transform: translate(-50%, -50%);*/
    margin: 0;
    padding: 0 20px;
    font-size: 15px;
    color: #0e0005;
    color: #fff;
    /* 先在文字周围生成集中度较高的阴影效果*/
    text-shadow: 0 0 10px #5100ff;
}

.lighttext::after {
    /* 
          CSS表达式 attr() 
              1. 用来获取选择到的元素的某一HTML属性值，并用于其样式。
              2. 也可以用于伪元素，属性值采用伪元素依赖的元素
          ref: [attr - CSS（层叠样式表） | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr())
          注意：attr()通常只用于CSS content属性，虽然理论上可以用于任何CSS属性
  
          这里是获取h1的data-text属性值，虽然完全可以手动输入，但是这可能也是后面JS中的一种响应式修改数据的需求吧
      */
    content: attr(data-text);
  
    /* 设置了绝对定位以后，元素默认为块元素 */
    position: absolute;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0 20px;
  
    /* 然后在文字周围生成弥散度较高的阴影效果*/
    /* 
      将文字的颜色设置为与文字阴影相同的颜色，并且设置较高的模糊(blur)值：相当于
      以文字和文字轮廓为参考，生成一个弥散的模糊光线效果
    */
    /* color: #0f0106; */
    z-index: -1;
    filter: blur(20px);
  }
  
  .lighttext::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  
    /* 最后在文字底部和周围添加一层模糊的淡淡的环绕光 */
    /* background-color: #9c7f86; */
    opacity: 0.5;
    filter: blur(10px);
    z-index: -1;
  }

  .lighttext:hover {
    color :#04bdd5;
  }
  .transparent-text {
    position: absolute;
    top: 60%;
    left: 50%;
    margin: 0;
    padding: 0;
    transform: translate(-50%, -50%);
    font-size: 5em;
    text-transform: uppercase;
    text-align: center;
    color: #fff;
    text-shadow: 0 5px 10px rgba(0, 0, 0, 1);
    mix-blend-mode: overlay;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);
    background-color: rgba(0, 0, 0, 0.2);
  }

  /* 父元素居中 加 子元素水平布局*/
.container {
    position: absolute;
    top: 10%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80%;
    height: auto;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: space-between;
  }
  
  .container li {
    list-style: none;
    position: relative;
  }
  
  .container li a {
    text-decoration: none;
    font-weight: bold;
    text-transform: uppercase;
    color: rgb(255, 255, 255);
  }
  
  /* 
      实现鼠标悬浮出现小长条的过渡动画效果
      前面的例子中，有两个例子都使用到了类似的过渡动画效果，如果有忘记的话，
      可以复习一下,模式是基本相同的:
      前面的例子用的是：
          伪元素+绝对定位生成小长条
          scale(0)/scale(1)+transition显示和隐藏长条，并添加过渡效果
          transition-origin：调整变换的原点
      这个例子用的是：
          伪元素+绝对定位生成小长条
          width:0;隐藏长条。width=50%显示长条(长条宽度为父元素的一半)，transform:translateX(100%)移动元素
          通过transition设置元素宽度变化和位置变化的过渡动画
          transition前状态：
          width:0;
          transform: none;
  
          transition后状态：
          width:50%;
          transform: translateX(100%)
          注：translateX中的百分比是以自身尺寸为基准进行移动的。所以这里是：
              1. 先让长条的宽度为50%(相对父元素)，此时长条宽度为父元素宽度的一半，左边界与父元素左边界重合
              2. 然后设置translateX(100%)，让长条向右移动自己的左边界，移动距离为自身尺寸的100%，最终位于父元素的右半边。
  
          transition结束后，会自动过渡回到自己的初始状态(transition前的状态)，也会有一个过渡效果
              */
  
  .container li::before {
    /* 可以在li中生成伪元素，也可以在a中生成伪元素，看自己习惯 */
    content: " ";
    position: absolute;
    top: 100%;
    left: 0;
    height: 5px;
    width: 0;
    background-color: #04bdd5;
    transition: 0.5s;
  }
  
  .container li:hover::before {
    /* 
      这里注意不要将::before写在:hover伪类前面 
      */
    width: 50%;
    transform: translateX(100%);
  }